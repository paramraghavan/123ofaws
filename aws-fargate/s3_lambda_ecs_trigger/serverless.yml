service: pp-s3-lambda-ecs-trigger

frameworkVersion: '2.38.0'

plugins:
  - serverless-pseudo-parameters

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  currentRegion: ${file(./config.${self:custom.currentStage}.json):region}
  bucket: ${file(./config.${self:custom.currentStage}.json):bucket}
  inFolder: ${file(./config.${self:custom.currentStage}.json):in_folder}
  inPath: ${self:custom.bucket}/${self:custom.inFolder}
  outFolder: ${file(./config.${self:custom.currentStage}.json):out_folder}
  outPath: ${self:custom.bucket}/${self:custom.outFolder}
  #ecsTaskName: ${self:service}-${self:provider.stage}-mcn-learning-task
  ecsTaskName: ${file(./config.${self:custom.currentStage}.json):taskName}
  image: ${file(./config.${self:custom.currentStage}.json):docker-copy-image}
  ecsTaskVpcSubnet1: ${file(./config.${self:custom.currentStage}.json):ecsTaskVpcSubnet1}
  ecsTaskVpcSubnet2: ${file(./config.${self:custom.currentStage}.json):ecsTaskVpcSubnet2}
  clusterName: ${file(./config.${self:custom.currentStage}.json):clusterName}
  containerName: ${file(./config.${self:custom.currentStage}.json):containerName}
  # clusterArn: { "Fn::Join" : ["", [ "arn:aws:ecs:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":cluster/default" ] ] }
  # taskDefArn: { "Fn::Join" : ["", [ "arn:aws:ecs:", { "Ref" : "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":task-definition/*:*" ] ] }
  execRoleArn: { "Fn::Join" : ["", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":role/ecsTaskExecutionRole" ] ] }
  roleArn: { "Fn::Join" : ["", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":role/ecsTaskRole" ] ] }
  roleFargateArn: { "Fn::Join" : ["", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":role/ecs-fargate-task-test-role" ] ] }


  #arn:aws:iam::123456789369:role/ecsTaskExecutionRole

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221  # optional, version of hashing algorithm that should be used by the framework
  stage: ${self:custom.currentStage}
  region: ${self:custom.currentRegion}
  environment:
    ECS_CLUSTER_NAME: ${self:custom.clusterName}
    ECS_TASK_DEFINITION: ${self:custom.ecsTaskName}
    ECS_TASK_VPC_SUBNET_1: ${self:custom.ecsTaskVpcSubnet1}
    ECS_TASK_VPC_SUBNET_2: ${self:custom.ecsTaskVpcSubnet2}
    IN_S3_PATH: ${self:custom.inPath}
    REGION: ${self:custom.currentRegion}
    BUCKET: ${self:custom.bucket}
    OUT_PATH: ${self:custom.outPath}
    CONTAINER_NAME: ${self:custom.containerName}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ecs:RunTask
      Resource: "*"
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: ${self:custom.execRoleArn}
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: ${self:custom.roleArn}
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: ${self:custom.roleFargateArn}
    - Effect: "Allow"
      Action:
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:custom.bucket}/*"

functions:
  ingest:
    handler: handler.process
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:custom.inFolder}/
            - suffix: .txt
          existing: true
  cleanup:
    handler: handler.remove
    events:
      - s3:
          bucket: ${self:custom.bucket}
          event: s3:ObjectRemoved:*
          rules:
            - prefix: ${self:custom.outFolder}/
            - suffix: .txt
          existing: true


